{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "PMD",
          "version": "7.2.0",
          "informationUri": "https://docs.pmd-code.org/latest/",
          "rules": [
            {
              "id": "UseUtilityClass",
              "shortDescription": {
                "text": "This utility class has a non-private constructor"
              },
              "fullDescription": {
                "text": "\nFor classes that only have static methods, consider making them utility classes.\nNote that this doesn't apply to abstract classes, since their subclasses may\nwell include non-static methods.  Also, if you want this class to be a utility class,\nremember to add a private constructor to prevent instantiation.\n(Note, that this use was known before PMD 5.1.0 as UseSingleton).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_design.html#useutilityclass",
              "help": {
                "text": "\nFor classes that only have static methods, consider making them utility classes.\nNote that this doesn't apply to abstract classes, since their subclasses may\nwell include non-static methods.  Also, if you want this class to be a utility class,\nremember to add a private constructor to prevent instantiation.\n(Note, that this use was known before PMD 5.1.0 as UseSingleton).\n        "
              },
              "properties": {
                "ruleset": "Design",
                "priority": 3,
                "tags": [
                  "Design"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'jakarta.servlet.http.HttpServletResponse'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.springframework.web.bind.annotation.*'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getNode_id' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setNode_id' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'node_id' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "LooseCoupling",
              "shortDescription": {
                "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
              },
              "fullDescription": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_bestpractices.html#loosecoupling",
              "help": {
                "text": "\nExcessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate\nimplementations in the future as requirements change. Whenever available, declare variables\nand parameters using a more general type (e.g, `Set`).\n\nThis rule reports uses of concrete collection types. User-defined types that should be treated\nthe same as interfaces can be configured with the property `allowedTypes`.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getHtml_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getDiff_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getPatch_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getIssue_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getCreated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getUpdated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getClosed_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getMerged_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getMerge_commit_sha' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getCommits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getReview_comments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getReview_comment_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getComments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getStatuses_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getAuthor_association' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getAuto_merge' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getActive_lock_reason' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getMergeable_state' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getMerged_by' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getReview_comments' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getMaintainer_can_modify' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getChanged_files' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setHtml_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'html_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setDiff_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'diff_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setPatch_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'patch_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setIssue_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'issue_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setCreated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'created_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setUpdated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'updated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setClosed_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'closed_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setMerged_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'merged_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setMerge_commit_sha' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'merge_commit_sha' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setCommits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'commits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setReview_comments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'review_comments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setReview_comment_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'review_comment_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setComments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'comments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setStatuses_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'statuses_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setAuthor_association' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'author_association' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setAuto_merge' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'auto_merge' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setActive_lock_reason' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'active_lock_reason' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setMergeable_state' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'mergeable_state' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setMerged_by' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'merged_by' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setReview_comments' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'review_comments' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setMaintainer_can_modify' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'maintainer_can_modify' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setChanged_files' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'changed_files' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getFull_name' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getForks_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getKeys_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getCollaborators_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getTeams_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getHooks_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getIssue_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getEvents_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getAssignees_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getBranches_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getTags_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getBlobs_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getGit_tags_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getGit_refs_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getTrees_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getLanguages_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getStargazers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getContributors_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getSubscribers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getSubscription_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getGit_commits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getIssue_comment_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getContents_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getCompare_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getMerges_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getArchive_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getDownloads_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getIssues_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getPulls_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getMilestones_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getNotifications_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getLabels_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getReleases_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getDeployments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getPushed_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getGit_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getSsh_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getClone_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getSvn_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getStargazers_count' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getWatchers_count' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getHas_issues' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getHas_projects' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getHas_downloads' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getHas_wiki' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getHas_pages' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getHas_discussions' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getForks_count' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getMirror_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getOpen_issues_count' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getAllow_forking' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getIs_template' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getWeb_commit_signoff_required' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getOpen_issues' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getDefault_branch' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setFull_name' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'full_name' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setForks_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'forks_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setKeys_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'keys_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setCollaborators_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'collaborators_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setTeams_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'teams_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setHooks_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'hooks_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setIssue_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'issue_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setEvents_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setAssignees_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'assignees_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setBranches_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'branches_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setTags_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'tags_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setBlobs_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'blobs_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setGit_tags_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'git_tags_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setGit_refs_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'git_refs_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setTrees_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'trees_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setLanguages_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'languages_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setStargazers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'stargazers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setContributors_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'contributors_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setSubscribers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'subscribers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setSubscription_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'subscription_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setGit_commits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'git_commits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setIssue_comment_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'issue_comment_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setContents_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'contents_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setCompare_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'compare_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setMerges_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'merges_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setArchive_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'archive_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setDownloads_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'downloads_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setIssues_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'issues_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setPulls_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'pulls_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setMilestones_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'milestones_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setNotifications_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'notifications_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setLabels_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'labels_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setReleases_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'releases_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setDeployments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'deployments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setPushed_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'pushed_at' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setGit_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'git_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setSsh_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'ssh_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setClone_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'clone_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setSvn_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'svn_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setStargazers_count' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'stargazers_count' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setWatchers_count' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'watchers_count' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setHas_issues' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'has_issues' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setHas_projects' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'has_projects' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setHas_downloads' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'has_downloads' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setHas_wiki' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'has_wiki' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setHas_pages' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'has_pages' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setHas_discussions' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'has_discussions' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setForks_count' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'forks_count' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setMirror_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'mirror_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setOpen_issues_count' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'open_issues_count' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setAllow_forking' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'allow_forking' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setIs_template' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'is_template' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setWeb_commit_signoff_required' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'web_commit_signoff_required' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setOpen_issues' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'open_issues' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setDefault_branch' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'default_branch' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getAvatar_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getGravatar_id' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getFollowers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getFollowing_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getGists_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getStarred_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getSubscriptions_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getOrganizations_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getRepos_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getReceived_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getSite_admin' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setAvatar_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'avatar_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setGravatar_id' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'gravatar_id' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setFollowers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'followers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setFollowing_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'following_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setGists_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'gists_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setStarred_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'starred_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setSubscriptions_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'subscriptions_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setOrganizations_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'organizations_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setRepos_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'repos_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setReceived_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'received_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setSite_admin' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'site_admin' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'getPull_request' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "MethodNamingConventions",
              "shortDescription": {
                "text": "The instance method name 'setPull_request' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#methodnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for method declarations. This rule reports\n            method declarations which do not match the regex that applies to their\n            specific kind (e.g. JUnit test or native method). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "FormalParameterNamingConventions",
              "shortDescription": {
                "text": "The method parameter name 'pull_requestObject' doesn't match '[a-z][a-zA-Z0-9]*'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#formalparameternamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for formal parameters of methods and lambdas.\n            This rule reports formal parameters which do not match the regex that applies to their\n            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be\n            configured through properties.\n\n            By default this rule uses the standard Java naming convention (Camel case).\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.springframework.data.jpa.repository.Query'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.springframework.data.repository.query.Param'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryLocalBeforeReturn",
              "shortDescription": {
                "text": "Consider simply returning the value vs storing it in local variable 'singleResult'"
              },
              "fullDescription": {
                "text": "\nAvoid the creation of unnecessary local variables\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessarylocalbeforereturn",
              "help": {
                "text": "\nAvoid the creation of unnecessary local variables\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.springframework.data.jpa.repository.Modifying'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'sourcePath'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'rulesetPath'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.util.Arrays'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.util.List'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "IdenticalCatchBranches",
              "shortDescription": {
                "text": "'catch' branch identical to 'IOException' branch"
              },
              "fullDescription": {
                "text": "\n            Identical `catch` branches use up vertical space and increase the complexity of code without\n            adding functionality. It's better style to collapse identical branches into a single multi-catch\n            branch.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#identicalcatchbranches",
              "help": {
                "text": "\n            Identical `catch` branches use up vertical space and increase the complexity of code without\n            adding functionality. It's better style to collapse identical branches into a single multi-catch\n            branch.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryLocalBeforeReturn",
              "shortDescription": {
                "text": "Consider simply returning the value vs storing it in local variable 'job'"
              },
              "fullDescription": {
                "text": "\nAvoid the creation of unnecessary local variables\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessarylocalbeforereturn",
              "help": {
                "text": "\nAvoid the creation of unnecessary local variables\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.eclipse.jgit.api.errors.*'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryLocalBeforeReturn",
              "shortDescription": {
                "text": "Consider simply returning the value vs storing it in local variable 'gitAccessToken'"
              },
              "fullDescription": {
                "text": "\nAvoid the creation of unnecessary local variables\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessarylocalbeforereturn",
              "help": {
                "text": "\nAvoid the creation of unnecessary local variables\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.springframework.boot.autoconfigure.SpringBootApplication'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.springframework.context.annotation.ComponentScan'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.springframework.data.jpa.repository.config.EnableJpaRepositories'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryLocalBeforeReturn",
              "shortDescription": {
                "text": "Consider simply returning the value vs storing it in local variable 'webhookPostJson'"
              },
              "fullDescription": {
                "text": "\nAvoid the creation of unnecessary local variables\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessarylocalbeforereturn",
              "help": {
                "text": "\nAvoid the creation of unnecessary local variables\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 3,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'com.auth0.jwt.JWT'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'com.auth0.jwt.algorithms.Algorithm'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.kohsuke.github.GitHub'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.kohsuke.github.GitHubBuilder'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.security.interfaces.RSAPrivateKey'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.util.Date'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.util.UUID'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'CloneGitrepo' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'io.jsonwebtoken.security.SignatureAlgorithm'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.eclipse.jgit.api.Git'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'org.kohsuke.github.*'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.util.HashMap'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnnecessaryImport",
              "shortDescription": {
                "text": "Unused import 'java.util.Map'"
              },
              "fullDescription": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#unnecessaryimport",
              "help": {
                "text": "\n            Reports import statements that can be removed. They are either unused,\n            duplicated, or the members they import are already implicitly in scope,\n            because they're in java.lang, or the current package.\n\n            If some imports cannot be resolved, for instance because you run PMD with\n            an incomplete auxiliary classpath, some imports may be conservatively marked\n            as used even if they're not to avoid false positives.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 4,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "ClassNamingConventions",
              "shortDescription": {
                "text": "The class name 'GenerateJWT' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
              },
              "fullDescription": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_codestyle.html#classnamingconventions",
              "help": {
                "text": "\n            Configurable naming conventions for type declarations. This rule reports\n            type declarations which do not match the regex that applies to their\n            specific kind (e.g. enum or interface). Each regex can be configured through\n            properties.\n\n            By default, this rule uses the standard Java naming convention (Pascal case).\n            \n            The rule can detect utility classes and enforce a different naming convention\n            on those. E.g. setting the property `utilityClassPattern` to\n            `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name\n            does not end in \"Util(s)\", \"Helper\" or \"Constants\".\n            \n            For this rule, a utility class is defined as: a concrete class that does not\n            inherit from a super class or implement any interface and only has static fields\n            or methods.\n\n            This rule detects test classes using the following convention: Test classes are top-level classes, that\n            either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from\n            JUnit4/5 or TestNG.\n        "
              },
              "properties": {
                "ruleset": "Code Style",
                "priority": 1,
                "tags": [
                  "Code Style"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'github'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'list'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Avoid unused local variables such as 'repo'."
              },
              "fullDescription": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "helpUri": "https://docs.pmd-code.org/pmd-doc-7.2.0/pmd_rules_java_bestpractices.html#unusedlocalvariable",
              "help": {
                "text": "\nDetects when a local variable is declared and/or assigned, but not used.\nVariables whose name starts with `ignored` or `unused` are filtered out.\n        "
              },
              "properties": {
                "ruleset": "Best Practices",
                "priority": 3,
                "tags": [
                  "Best Practices"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/ServiceApplication.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 8,
                  "endLine": 11,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 1,
          "message": {
            "text": "Unused import 'jakarta.servlet.http.HttpServletResponse'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/controller/SourceControlProviderWebhookController.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 2,
          "message": {
            "text": "Unused import 'org.springframework.web.bind.annotation.*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/controller/SourceControlProviderWebhookController.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 3,
          "message": {
            "text": "The instance method name 'getNode_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostInstallation.java"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 17,
                  "endLine": 13,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 4,
          "message": {
            "text": "The instance method name 'setNode_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostInstallation.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 15,
                  "endLine": 23,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 5,
          "message": {
            "text": "The method parameter name 'node_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostInstallation.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 34,
                  "endLine": 23,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 6,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 3,
                  "endLine": 25,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 6,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 3,
                  "endLine": 26,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 6,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 3,
                  "endLine": 27,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 6,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 3,
                  "endLine": 28,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 3,
          "message": {
            "text": "The instance method name 'getNode_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 17,
                  "endLine": 66,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 7,
          "message": {
            "text": "The instance method name 'getHtml_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 17,
                  "endLine": 70,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 8,
          "message": {
            "text": "The instance method name 'getDiff_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 17,
                  "endLine": 74,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 9,
          "message": {
            "text": "The instance method name 'getPatch_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 17,
                  "endLine": 78,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 10,
          "message": {
            "text": "The instance method name 'getIssue_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 17,
                  "endLine": 82,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 11,
          "message": {
            "text": "The instance method name 'getCreated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 17,
                  "endLine": 110,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 12,
          "message": {
            "text": "The instance method name 'getUpdated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 17,
                  "endLine": 114,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 13,
          "message": {
            "text": "The instance method name 'getClosed_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 17,
                  "endLine": 118,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 14,
          "message": {
            "text": "The instance method name 'getMerged_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 17,
                  "endLine": 122,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 15,
          "message": {
            "text": "The instance method name 'getMerge_commit_sha' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 17,
                  "endLine": 126,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 16,
          "message": {
            "text": "The instance method name 'getCommits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 17,
                  "endLine": 142,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 17,
          "message": {
            "text": "The instance method name 'getReview_comments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 17,
                  "endLine": 146,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 18,
          "message": {
            "text": "The instance method name 'getReview_comment_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 17,
                  "endLine": 150,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 19,
          "message": {
            "text": "The instance method name 'getComments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 17,
                  "endLine": 154,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 20,
          "message": {
            "text": "The instance method name 'getStatuses_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 17,
                  "endLine": 158,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 21,
          "message": {
            "text": "The instance method name 'getAuthor_association' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 17,
                  "endLine": 163,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 22,
          "message": {
            "text": "The instance method name 'getAuto_merge' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 17,
                  "endLine": 167,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 23,
          "message": {
            "text": "The instance method name 'getActive_lock_reason' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 17,
                  "endLine": 171,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 24,
          "message": {
            "text": "The instance method name 'getMergeable_state' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 17,
                  "endLine": 187,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 25,
          "message": {
            "text": "The instance method name 'getMerged_by' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 17,
                  "endLine": 191,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 26,
          "message": {
            "text": "The instance method name 'getReview_comments' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 15,
                  "endLine": 199,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 27,
          "message": {
            "text": "The instance method name 'getMaintainer_can_modify' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 18,
                  "endLine": 203,
                  "endColumn": 42
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 28,
          "message": {
            "text": "The instance method name 'getChanged_files' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 15,
                  "endLine": 219,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 4,
          "message": {
            "text": "The instance method name 'setNode_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 15,
                  "endLine": 233,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 5,
          "message": {
            "text": "The method parameter name 'node_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 34,
                  "endLine": 233,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 29,
          "message": {
            "text": "The instance method name 'setHtml_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 15,
                  "endLine": 237,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 30,
          "message": {
            "text": "The method parameter name 'html_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 35,
                  "endLine": 237,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 31,
          "message": {
            "text": "The instance method name 'setDiff_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 15,
                  "endLine": 241,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 32,
          "message": {
            "text": "The method parameter name 'diff_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 35,
                  "endLine": 241,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 33,
          "message": {
            "text": "The instance method name 'setPatch_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 15,
                  "endLine": 245,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 34,
          "message": {
            "text": "The method parameter name 'patch_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 36,
                  "endLine": 245,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 35,
          "message": {
            "text": "The instance method name 'setIssue_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 15,
                  "endLine": 249,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 36,
          "message": {
            "text": "The method parameter name 'issue_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 36,
                  "endLine": 249,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 37,
          "message": {
            "text": "The instance method name 'setCreated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 15,
                  "endLine": 277,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 38,
          "message": {
            "text": "The method parameter name 'created_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 37,
                  "endLine": 277,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 39,
          "message": {
            "text": "The instance method name 'setUpdated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 15,
                  "endLine": 281,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 40,
          "message": {
            "text": "The method parameter name 'updated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 37,
                  "endLine": 281,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 41,
          "message": {
            "text": "The instance method name 'setClosed_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 15,
                  "endLine": 285,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 42,
          "message": {
            "text": "The method parameter name 'closed_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 36,
                  "endLine": 285,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 43,
          "message": {
            "text": "The instance method name 'setMerged_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 15,
                  "endLine": 289,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 44,
          "message": {
            "text": "The method parameter name 'merged_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 36,
                  "endLine": 289,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 45,
          "message": {
            "text": "The instance method name 'setMerge_commit_sha' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 15,
                  "endLine": 293,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 46,
          "message": {
            "text": "The method parameter name 'merge_commit_sha' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 43,
                  "endLine": 293,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 47,
          "message": {
            "text": "The instance method name 'setCommits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 15,
                  "endLine": 309,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 48,
          "message": {
            "text": "The method parameter name 'commits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 38,
                  "endLine": 309,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 49,
          "message": {
            "text": "The instance method name 'setReview_comments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 15,
                  "endLine": 325,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 50,
          "message": {
            "text": "The method parameter name 'review_comments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 325,
                  "startColumn": 45,
                  "endLine": 325,
                  "endColumn": 64
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 51,
          "message": {
            "text": "The instance method name 'setReview_comment_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 15,
                  "endLine": 329,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 52,
          "message": {
            "text": "The method parameter name 'review_comment_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 45,
                  "endLine": 329,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 53,
          "message": {
            "text": "The instance method name 'setComments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 15,
                  "endLine": 333,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 54,
          "message": {
            "text": "The method parameter name 'comments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 39,
                  "endLine": 333,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 55,
          "message": {
            "text": "The instance method name 'setStatuses_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 15,
                  "endLine": 337,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 56,
          "message": {
            "text": "The method parameter name 'statuses_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 337,
                  "startColumn": 39,
                  "endLine": 337,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 57,
          "message": {
            "text": "The instance method name 'setAuthor_association' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 15,
                  "endLine": 341,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 58,
          "message": {
            "text": "The method parameter name 'author_association' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 45,
                  "endLine": 341,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 59,
          "message": {
            "text": "The instance method name 'setAuto_merge' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 15,
                  "endLine": 345,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 60,
          "message": {
            "text": "The method parameter name 'auto_merge' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 37,
                  "endLine": 345,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 61,
          "message": {
            "text": "The instance method name 'setActive_lock_reason' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 15,
                  "endLine": 349,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 62,
          "message": {
            "text": "The method parameter name 'active_lock_reason' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 45,
                  "endLine": 349,
                  "endColumn": 63
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 63,
          "message": {
            "text": "The instance method name 'setMergeable_state' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 15,
                  "endLine": 365,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 64,
          "message": {
            "text": "The method parameter name 'mergeable_state' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 42,
                  "endLine": 365,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 65,
          "message": {
            "text": "The instance method name 'setMerged_by' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 15,
                  "endLine": 369,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 66,
          "message": {
            "text": "The method parameter name 'merged_by' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 36,
                  "endLine": 369,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 67,
          "message": {
            "text": "The instance method name 'setReview_comments' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 15,
                  "endLine": 377,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 68,
          "message": {
            "text": "The method parameter name 'review_comments' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 40,
                  "endLine": 377,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 69,
          "message": {
            "text": "The instance method name 'setMaintainer_can_modify' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 15,
                  "endLine": 381,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 70,
          "message": {
            "text": "The method parameter name 'maintainer_can_modify' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 381,
                  "startColumn": 49,
                  "endLine": 381,
                  "endColumn": 70
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 71,
          "message": {
            "text": "The instance method name 'setChanged_files' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 15,
                  "endLine": 397,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 72,
          "message": {
            "text": "The method parameter name 'changed_files' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostPullRequest.java"
                },
                "region": {
                  "startLine": 397,
                  "startColumn": 38,
                  "endLine": 397,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "LooseCoupling",
          "ruleIndex": 6,
          "message": {
            "text": "Avoid using implementation types like 'ArrayList'; use the interface instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 3,
                  "endLine": 78,
                  "endColumn": 20
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 3,
          "message": {
            "text": "The instance method name 'getNode_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 17,
                  "endLine": 92,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 73,
          "message": {
            "text": "The instance method name 'getFull_name' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 17,
                  "endLine": 100,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 7,
          "message": {
            "text": "The instance method name 'getHtml_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 17,
                  "endLine": 104,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 74,
          "message": {
            "text": "The instance method name 'getForks_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 17,
                  "endLine": 120,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 75,
          "message": {
            "text": "The instance method name 'getKeys_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 17,
                  "endLine": 124,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 76,
          "message": {
            "text": "The instance method name 'getCollaborators_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 17,
                  "endLine": 128,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 77,
          "message": {
            "text": "The instance method name 'getTeams_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 17,
                  "endLine": 132,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 78,
          "message": {
            "text": "The instance method name 'getHooks_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 17,
                  "endLine": 136,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 79,
          "message": {
            "text": "The instance method name 'getIssue_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 17,
                  "endLine": 140,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 80,
          "message": {
            "text": "The instance method name 'getEvents_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 17,
                  "endLine": 144,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 81,
          "message": {
            "text": "The instance method name 'getAssignees_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 17,
                  "endLine": 148,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 82,
          "message": {
            "text": "The instance method name 'getBranches_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 17,
                  "endLine": 152,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 83,
          "message": {
            "text": "The instance method name 'getTags_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 17,
                  "endLine": 156,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 84,
          "message": {
            "text": "The instance method name 'getBlobs_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 17,
                  "endLine": 160,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 85,
          "message": {
            "text": "The instance method name 'getGit_tags_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 17,
                  "endLine": 164,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 86,
          "message": {
            "text": "The instance method name 'getGit_refs_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 17,
                  "endLine": 168,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 87,
          "message": {
            "text": "The instance method name 'getTrees_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 17,
                  "endLine": 172,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 20,
          "message": {
            "text": "The instance method name 'getStatuses_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 17,
                  "endLine": 176,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 88,
          "message": {
            "text": "The instance method name 'getLanguages_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 17,
                  "endLine": 180,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 89,
          "message": {
            "text": "The instance method name 'getStargazers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 17,
                  "endLine": 184,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 90,
          "message": {
            "text": "The instance method name 'getContributors_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 17,
                  "endLine": 188,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 91,
          "message": {
            "text": "The instance method name 'getSubscribers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 17,
                  "endLine": 192,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 92,
          "message": {
            "text": "The instance method name 'getSubscription_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 17,
                  "endLine": 196,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 16,
          "message": {
            "text": "The instance method name 'getCommits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 17,
                  "endLine": 200,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 93,
          "message": {
            "text": "The instance method name 'getGit_commits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 17,
                  "endLine": 204,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 19,
          "message": {
            "text": "The instance method name 'getComments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 17,
                  "endLine": 208,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 94,
          "message": {
            "text": "The instance method name 'getIssue_comment_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 17,
                  "endLine": 212,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 95,
          "message": {
            "text": "The instance method name 'getContents_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 17,
                  "endLine": 216,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 96,
          "message": {
            "text": "The instance method name 'getCompare_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 17,
                  "endLine": 220,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 97,
          "message": {
            "text": "The instance method name 'getMerges_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 224,
                  "startColumn": 17,
                  "endLine": 224,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 98,
          "message": {
            "text": "The instance method name 'getArchive_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 17,
                  "endLine": 228,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 99,
          "message": {
            "text": "The instance method name 'getDownloads_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 17,
                  "endLine": 232,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 100,
          "message": {
            "text": "The instance method name 'getIssues_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 17,
                  "endLine": 236,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 101,
          "message": {
            "text": "The instance method name 'getPulls_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 17,
                  "endLine": 240,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 102,
          "message": {
            "text": "The instance method name 'getMilestones_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 17,
                  "endLine": 244,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 103,
          "message": {
            "text": "The instance method name 'getNotifications_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 248,
                  "startColumn": 17,
                  "endLine": 248,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 104,
          "message": {
            "text": "The instance method name 'getLabels_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 17,
                  "endLine": 252,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 105,
          "message": {
            "text": "The instance method name 'getReleases_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 256,
                  "startColumn": 17,
                  "endLine": 256,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 106,
          "message": {
            "text": "The instance method name 'getDeployments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 17,
                  "endLine": 260,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 11,
          "message": {
            "text": "The instance method name 'getCreated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 17,
                  "endLine": 264,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 12,
          "message": {
            "text": "The instance method name 'getUpdated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 17,
                  "endLine": 268,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 107,
          "message": {
            "text": "The instance method name 'getPushed_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 17,
                  "endLine": 272,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 108,
          "message": {
            "text": "The instance method name 'getGit_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 17,
                  "endLine": 276,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 109,
          "message": {
            "text": "The instance method name 'getSsh_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 17,
                  "endLine": 280,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 110,
          "message": {
            "text": "The instance method name 'getClone_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 17,
                  "endLine": 284,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 111,
          "message": {
            "text": "The instance method name 'getSvn_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 17,
                  "endLine": 288,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 112,
          "message": {
            "text": "The instance method name 'getStargazers_count' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 300,
                  "startColumn": 15,
                  "endLine": 300,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 113,
          "message": {
            "text": "The instance method name 'getWatchers_count' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 15,
                  "endLine": 304,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 114,
          "message": {
            "text": "The instance method name 'getHas_issues' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 18,
                  "endLine": 312,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 115,
          "message": {
            "text": "The instance method name 'getHas_projects' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 18,
                  "endLine": 316,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 116,
          "message": {
            "text": "The instance method name 'getHas_downloads' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 320,
                  "startColumn": 18,
                  "endLine": 320,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 117,
          "message": {
            "text": "The instance method name 'getHas_wiki' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 18,
                  "endLine": 324,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 118,
          "message": {
            "text": "The instance method name 'getHas_pages' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 18,
                  "endLine": 328,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 119,
          "message": {
            "text": "The instance method name 'getHas_discussions' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 332,
                  "startColumn": 18,
                  "endLine": 332,
                  "endColumn": 36
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 120,
          "message": {
            "text": "The instance method name 'getForks_count' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 15,
                  "endLine": 336,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 121,
          "message": {
            "text": "The instance method name 'getMirror_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 17,
                  "endLine": 340,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 122,
          "message": {
            "text": "The instance method name 'getOpen_issues_count' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 15,
                  "endLine": 352,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 123,
          "message": {
            "text": "The instance method name 'getAllow_forking' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 357,
                  "startColumn": 18,
                  "endLine": 357,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 124,
          "message": {
            "text": "The instance method name 'getIs_template' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 18,
                  "endLine": 361,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 125,
          "message": {
            "text": "The instance method name 'getWeb_commit_signoff_required' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 18,
                  "endLine": 365,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 126,
          "message": {
            "text": "The instance method name 'getOpen_issues' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 15,
                  "endLine": 377,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 127,
          "message": {
            "text": "The instance method name 'getDefault_branch' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 17,
                  "endLine": 385,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 4,
          "message": {
            "text": "The instance method name 'setNode_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 15,
                  "endLine": 395,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 5,
          "message": {
            "text": "The method parameter name 'node_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 34,
                  "endLine": 395,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 128,
          "message": {
            "text": "The instance method name 'setFull_name' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 15,
                  "endLine": 403,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 129,
          "message": {
            "text": "The method parameter name 'full_name' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 403,
                  "startColumn": 36,
                  "endLine": 403,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 29,
          "message": {
            "text": "The instance method name 'setHtml_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 15,
                  "endLine": 408,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 30,
          "message": {
            "text": "The method parameter name 'html_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 35,
                  "endLine": 408,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 130,
          "message": {
            "text": "The instance method name 'setForks_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 15,
                  "endLine": 424,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 131,
          "message": {
            "text": "The method parameter name 'forks_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 36,
                  "endLine": 424,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 132,
          "message": {
            "text": "The instance method name 'setKeys_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 15,
                  "endLine": 428,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 133,
          "message": {
            "text": "The method parameter name 'keys_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 35,
                  "endLine": 428,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 134,
          "message": {
            "text": "The instance method name 'setCollaborators_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 15,
                  "endLine": 432,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 135,
          "message": {
            "text": "The method parameter name 'collaborators_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 44,
                  "endLine": 432,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 136,
          "message": {
            "text": "The instance method name 'setTeams_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 15,
                  "endLine": 436,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 137,
          "message": {
            "text": "The method parameter name 'teams_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 36,
                  "endLine": 436,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 138,
          "message": {
            "text": "The instance method name 'setHooks_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 15,
                  "endLine": 440,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 139,
          "message": {
            "text": "The method parameter name 'hooks_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 36,
                  "endLine": 440,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 140,
          "message": {
            "text": "The instance method name 'setIssue_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 15,
                  "endLine": 444,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 141,
          "message": {
            "text": "The method parameter name 'issue_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 43,
                  "endLine": 444,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 142,
          "message": {
            "text": "The instance method name 'setEvents_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 15,
                  "endLine": 448,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 143,
          "message": {
            "text": "The method parameter name 'events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 37,
                  "endLine": 448,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 144,
          "message": {
            "text": "The instance method name 'setAssignees_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 15,
                  "endLine": 452,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 145,
          "message": {
            "text": "The method parameter name 'assignees_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 40,
                  "endLine": 452,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 146,
          "message": {
            "text": "The instance method name 'setBranches_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 15,
                  "endLine": 456,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 147,
          "message": {
            "text": "The method parameter name 'branches_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 456,
                  "startColumn": 39,
                  "endLine": 456,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 148,
          "message": {
            "text": "The instance method name 'setTags_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 15,
                  "endLine": 460,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 149,
          "message": {
            "text": "The method parameter name 'tags_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 35,
                  "endLine": 460,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 150,
          "message": {
            "text": "The instance method name 'setBlobs_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 15,
                  "endLine": 464,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 151,
          "message": {
            "text": "The method parameter name 'blobs_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 36,
                  "endLine": 464,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 152,
          "message": {
            "text": "The instance method name 'setGit_tags_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 15,
                  "endLine": 468,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 153,
          "message": {
            "text": "The method parameter name 'git_tags_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 468,
                  "startColumn": 39,
                  "endLine": 468,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 154,
          "message": {
            "text": "The instance method name 'setGit_refs_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 15,
                  "endLine": 472,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 155,
          "message": {
            "text": "The method parameter name 'git_refs_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 39,
                  "endLine": 472,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 156,
          "message": {
            "text": "The instance method name 'setTrees_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 15,
                  "endLine": 476,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 157,
          "message": {
            "text": "The method parameter name 'trees_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 36,
                  "endLine": 476,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 55,
          "message": {
            "text": "The instance method name 'setStatuses_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 15,
                  "endLine": 480,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 56,
          "message": {
            "text": "The method parameter name 'statuses_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 39,
                  "endLine": 480,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 158,
          "message": {
            "text": "The instance method name 'setLanguages_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 15,
                  "endLine": 484,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 159,
          "message": {
            "text": "The method parameter name 'languages_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 40,
                  "endLine": 484,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 160,
          "message": {
            "text": "The instance method name 'setStargazers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 15,
                  "endLine": 488,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 161,
          "message": {
            "text": "The method parameter name 'stargazers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 488,
                  "startColumn": 41,
                  "endLine": 488,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 162,
          "message": {
            "text": "The instance method name 'setContributors_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 15,
                  "endLine": 492,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 163,
          "message": {
            "text": "The method parameter name 'contributors_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 43,
                  "endLine": 492,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 164,
          "message": {
            "text": "The instance method name 'setSubscribers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 15,
                  "endLine": 496,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 165,
          "message": {
            "text": "The method parameter name 'subscribers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 496,
                  "startColumn": 42,
                  "endLine": 496,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 166,
          "message": {
            "text": "The instance method name 'setSubscription_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 500,
                  "startColumn": 15,
                  "endLine": 500,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 167,
          "message": {
            "text": "The method parameter name 'subscription_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 500,
                  "startColumn": 43,
                  "endLine": 500,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 47,
          "message": {
            "text": "The instance method name 'setCommits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 15,
                  "endLine": 504,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 48,
          "message": {
            "text": "The method parameter name 'commits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 38,
                  "endLine": 504,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 168,
          "message": {
            "text": "The instance method name 'setGit_commits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 15,
                  "endLine": 508,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 169,
          "message": {
            "text": "The method parameter name 'git_commits_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 508,
                  "startColumn": 42,
                  "endLine": 508,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 53,
          "message": {
            "text": "The instance method name 'setComments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 15,
                  "endLine": 512,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 54,
          "message": {
            "text": "The method parameter name 'comments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 39,
                  "endLine": 512,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 170,
          "message": {
            "text": "The instance method name 'setIssue_comment_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 15,
                  "endLine": 516,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 171,
          "message": {
            "text": "The method parameter name 'issue_comment_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 516,
                  "startColumn": 44,
                  "endLine": 516,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 172,
          "message": {
            "text": "The instance method name 'setContents_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 15,
                  "endLine": 520,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 173,
          "message": {
            "text": "The method parameter name 'contents_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 39,
                  "endLine": 520,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 174,
          "message": {
            "text": "The instance method name 'setCompare_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 15,
                  "endLine": 524,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 175,
          "message": {
            "text": "The method parameter name 'compare_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 38,
                  "endLine": 524,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 176,
          "message": {
            "text": "The instance method name 'setMerges_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 15,
                  "endLine": 528,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 177,
          "message": {
            "text": "The method parameter name 'merges_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 528,
                  "startColumn": 37,
                  "endLine": 528,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 178,
          "message": {
            "text": "The instance method name 'setArchive_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 15,
                  "endLine": 532,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 179,
          "message": {
            "text": "The method parameter name 'archive_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 38,
                  "endLine": 532,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 180,
          "message": {
            "text": "The instance method name 'setDownloads_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 15,
                  "endLine": 536,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 181,
          "message": {
            "text": "The method parameter name 'downloads_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 536,
                  "startColumn": 40,
                  "endLine": 536,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 182,
          "message": {
            "text": "The instance method name 'setIssues_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 15,
                  "endLine": 540,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 183,
          "message": {
            "text": "The method parameter name 'issues_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 37,
                  "endLine": 540,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 184,
          "message": {
            "text": "The instance method name 'setPulls_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 544,
                  "startColumn": 15,
                  "endLine": 544,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 185,
          "message": {
            "text": "The method parameter name 'pulls_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 544,
                  "startColumn": 36,
                  "endLine": 544,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 186,
          "message": {
            "text": "The instance method name 'setMilestones_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 548,
                  "startColumn": 15,
                  "endLine": 548,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 187,
          "message": {
            "text": "The method parameter name 'milestones_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 548,
                  "startColumn": 41,
                  "endLine": 548,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 188,
          "message": {
            "text": "The instance method name 'setNotifications_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 15,
                  "endLine": 552,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 189,
          "message": {
            "text": "The method parameter name 'notifications_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 44,
                  "endLine": 552,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 190,
          "message": {
            "text": "The instance method name 'setLabels_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 556,
                  "startColumn": 15,
                  "endLine": 556,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 191,
          "message": {
            "text": "The method parameter name 'labels_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 556,
                  "startColumn": 37,
                  "endLine": 556,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 192,
          "message": {
            "text": "The instance method name 'setReleases_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 560,
                  "startColumn": 15,
                  "endLine": 560,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 193,
          "message": {
            "text": "The method parameter name 'releases_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 560,
                  "startColumn": 39,
                  "endLine": 560,
                  "endColumn": 51
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 194,
          "message": {
            "text": "The instance method name 'setDeployments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 15,
                  "endLine": 564,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 195,
          "message": {
            "text": "The method parameter name 'deployments_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 42,
                  "endLine": 564,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 37,
          "message": {
            "text": "The instance method name 'setCreated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 15,
                  "endLine": 568,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 38,
          "message": {
            "text": "The method parameter name 'created_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 37,
                  "endLine": 568,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 39,
          "message": {
            "text": "The instance method name 'setUpdated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 572,
                  "startColumn": 15,
                  "endLine": 572,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 40,
          "message": {
            "text": "The method parameter name 'updated_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 572,
                  "startColumn": 37,
                  "endLine": 572,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 196,
          "message": {
            "text": "The instance method name 'setPushed_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 15,
                  "endLine": 576,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 197,
          "message": {
            "text": "The method parameter name 'pushed_at' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 576,
                  "startColumn": 36,
                  "endLine": 576,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 198,
          "message": {
            "text": "The instance method name 'setGit_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 15,
                  "endLine": 580,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 199,
          "message": {
            "text": "The method parameter name 'git_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 34,
                  "endLine": 580,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 200,
          "message": {
            "text": "The instance method name 'setSsh_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 15,
                  "endLine": 584,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 201,
          "message": {
            "text": "The method parameter name 'ssh_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 584,
                  "startColumn": 34,
                  "endLine": 584,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 202,
          "message": {
            "text": "The instance method name 'setClone_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 15,
                  "endLine": 588,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 203,
          "message": {
            "text": "The method parameter name 'clone_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 588,
                  "startColumn": 36,
                  "endLine": 588,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 204,
          "message": {
            "text": "The instance method name 'setSvn_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 592,
                  "startColumn": 15,
                  "endLine": 592,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 205,
          "message": {
            "text": "The method parameter name 'svn_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 592,
                  "startColumn": 34,
                  "endLine": 592,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 206,
          "message": {
            "text": "The instance method name 'setStargazers_count' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 15,
                  "endLine": 604,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 207,
          "message": {
            "text": "The method parameter name 'stargazers_count' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 604,
                  "startColumn": 41,
                  "endLine": 604,
                  "endColumn": 57
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 208,
          "message": {
            "text": "The instance method name 'setWatchers_count' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 15,
                  "endLine": 608,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 209,
          "message": {
            "text": "The method parameter name 'watchers_count' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 39,
                  "endLine": 608,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 210,
          "message": {
            "text": "The instance method name 'setHas_issues' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 15,
                  "endLine": 616,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 211,
          "message": {
            "text": "The method parameter name 'has_issues' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 38,
                  "endLine": 616,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 212,
          "message": {
            "text": "The instance method name 'setHas_projects' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 15,
                  "endLine": 620,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 213,
          "message": {
            "text": "The method parameter name 'has_projects' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 40,
                  "endLine": 620,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 214,
          "message": {
            "text": "The instance method name 'setHas_downloads' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 624,
                  "startColumn": 15,
                  "endLine": 624,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 215,
          "message": {
            "text": "The method parameter name 'has_downloads' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 624,
                  "startColumn": 41,
                  "endLine": 624,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 216,
          "message": {
            "text": "The instance method name 'setHas_wiki' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 628,
                  "startColumn": 15,
                  "endLine": 628,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 217,
          "message": {
            "text": "The method parameter name 'has_wiki' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 628,
                  "startColumn": 36,
                  "endLine": 628,
                  "endColumn": 44
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 218,
          "message": {
            "text": "The instance method name 'setHas_pages' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 15,
                  "endLine": 632,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 219,
          "message": {
            "text": "The method parameter name 'has_pages' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 632,
                  "startColumn": 37,
                  "endLine": 632,
                  "endColumn": 46
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 220,
          "message": {
            "text": "The instance method name 'setHas_discussions' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 636,
                  "startColumn": 15,
                  "endLine": 636,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 221,
          "message": {
            "text": "The method parameter name 'has_discussions' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 636,
                  "startColumn": 43,
                  "endLine": 636,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 222,
          "message": {
            "text": "The instance method name 'setForks_count' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 15,
                  "endLine": 640,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 223,
          "message": {
            "text": "The method parameter name 'forks_count' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 640,
                  "startColumn": 36,
                  "endLine": 640,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 224,
          "message": {
            "text": "The instance method name 'setMirror_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 15,
                  "endLine": 644,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 225,
          "message": {
            "text": "The method parameter name 'mirror_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 37,
                  "endLine": 644,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 226,
          "message": {
            "text": "The instance method name 'setOpen_issues_count' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 656,
                  "startColumn": 15,
                  "endLine": 656,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 227,
          "message": {
            "text": "The method parameter name 'open_issues_count' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 656,
                  "startColumn": 42,
                  "endLine": 656,
                  "endColumn": 59
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 228,
          "message": {
            "text": "The instance method name 'setAllow_forking' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 15,
                  "endLine": 661,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 229,
          "message": {
            "text": "The method parameter name 'allow_forking' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 41,
                  "endLine": 661,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 230,
          "message": {
            "text": "The instance method name 'setIs_template' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 665,
                  "startColumn": 15,
                  "endLine": 665,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 231,
          "message": {
            "text": "The method parameter name 'is_template' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 665,
                  "startColumn": 39,
                  "endLine": 665,
                  "endColumn": 50
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 232,
          "message": {
            "text": "The instance method name 'setWeb_commit_signoff_required' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 15,
                  "endLine": 669,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 233,
          "message": {
            "text": "The method parameter name 'web_commit_signoff_required' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 669,
                  "startColumn": 55,
                  "endLine": 669,
                  "endColumn": 82
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 234,
          "message": {
            "text": "The instance method name 'setOpen_issues' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 681,
                  "startColumn": 15,
                  "endLine": 681,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 235,
          "message": {
            "text": "The method parameter name 'open_issues' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 681,
                  "startColumn": 36,
                  "endLine": 681,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 236,
          "message": {
            "text": "The instance method name 'setDefault_branch' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 15,
                  "endLine": 689,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 237,
          "message": {
            "text": "The method parameter name 'default_branch' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostRepository.java"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 41,
                  "endLine": 689,
                  "endColumn": 55
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 3,
          "message": {
            "text": "The instance method name 'getNode_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 17,
                  "endLine": 34,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 238,
          "message": {
            "text": "The instance method name 'getAvatar_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 17,
                  "endLine": 38,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 239,
          "message": {
            "text": "The instance method name 'getGravatar_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 17,
                  "endLine": 42,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 7,
          "message": {
            "text": "The instance method name 'getHtml_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 17,
                  "endLine": 50,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 240,
          "message": {
            "text": "The instance method name 'getFollowers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 17,
                  "endLine": 54,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 241,
          "message": {
            "text": "The instance method name 'getFollowing_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 17,
                  "endLine": 58,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 242,
          "message": {
            "text": "The instance method name 'getGists_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "endLine": 62,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 243,
          "message": {
            "text": "The instance method name 'getStarred_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 17,
                  "endLine": 66,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 244,
          "message": {
            "text": "The instance method name 'getSubscriptions_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 17,
                  "endLine": 70,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 245,
          "message": {
            "text": "The instance method name 'getOrganizations_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 17,
                  "endLine": 74,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 246,
          "message": {
            "text": "The instance method name 'getRepos_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 17,
                  "endLine": 78,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 80,
          "message": {
            "text": "The instance method name 'getEvents_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 17,
                  "endLine": 82,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 247,
          "message": {
            "text": "The instance method name 'getReceived_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 17,
                  "endLine": 86,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 248,
          "message": {
            "text": "The instance method name 'getSite_admin' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 18,
                  "endLine": 94,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 4,
          "message": {
            "text": "The instance method name 'setNode_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 15,
                  "endLine": 108,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 5,
          "message": {
            "text": "The method parameter name 'node_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 34,
                  "endLine": 108,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 249,
          "message": {
            "text": "The instance method name 'setAvatar_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 15,
                  "endLine": 112,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 250,
          "message": {
            "text": "The method parameter name 'avatar_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 37,
                  "endLine": 112,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 251,
          "message": {
            "text": "The instance method name 'setGravatar_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 15,
                  "endLine": 116,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 252,
          "message": {
            "text": "The method parameter name 'gravatar_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 38,
                  "endLine": 116,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 29,
          "message": {
            "text": "The instance method name 'setHtml_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 15,
                  "endLine": 124,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 30,
          "message": {
            "text": "The method parameter name 'html_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 35,
                  "endLine": 124,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 253,
          "message": {
            "text": "The instance method name 'setFollowers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 15,
                  "endLine": 128,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 254,
          "message": {
            "text": "The method parameter name 'followers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 40,
                  "endLine": 128,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 255,
          "message": {
            "text": "The instance method name 'setFollowing_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 15,
                  "endLine": 132,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 256,
          "message": {
            "text": "The method parameter name 'following_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 40,
                  "endLine": 132,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 257,
          "message": {
            "text": "The instance method name 'setGists_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 15,
                  "endLine": 136,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 258,
          "message": {
            "text": "The method parameter name 'gists_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 36,
                  "endLine": 136,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 259,
          "message": {
            "text": "The instance method name 'setStarred_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 15,
                  "endLine": 140,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 260,
          "message": {
            "text": "The method parameter name 'starred_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 38,
                  "endLine": 140,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 261,
          "message": {
            "text": "The instance method name 'setSubscriptions_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 15,
                  "endLine": 144,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 262,
          "message": {
            "text": "The method parameter name 'subscriptions_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 44,
                  "endLine": 144,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 263,
          "message": {
            "text": "The instance method name 'setOrganizations_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 15,
                  "endLine": 148,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 264,
          "message": {
            "text": "The method parameter name 'organizations_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 44,
                  "endLine": 148,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 265,
          "message": {
            "text": "The instance method name 'setRepos_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 15,
                  "endLine": 152,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 266,
          "message": {
            "text": "The method parameter name 'repos_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 36,
                  "endLine": 152,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 142,
          "message": {
            "text": "The instance method name 'setEvents_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 15,
                  "endLine": 156,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 143,
          "message": {
            "text": "The method parameter name 'events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 37,
                  "endLine": 156,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 267,
          "message": {
            "text": "The instance method name 'setReceived_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 15,
                  "endLine": 160,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 268,
          "message": {
            "text": "The method parameter name 'received_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 46,
                  "endLine": 160,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 269,
          "message": {
            "text": "The instance method name 'setSite_admin' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 15,
                  "endLine": 168,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 270,
          "message": {
            "text": "The method parameter name 'site_admin' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostSender.java"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 38,
                  "endLine": 168,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 3,
          "message": {
            "text": "The instance method name 'getNode_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 17,
                  "endLine": 34,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 238,
          "message": {
            "text": "The instance method name 'getAvatar_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 17,
                  "endLine": 38,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 239,
          "message": {
            "text": "The instance method name 'getGravatar_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 17,
                  "endLine": 42,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 7,
          "message": {
            "text": "The instance method name 'getHtml_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 17,
                  "endLine": 50,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 240,
          "message": {
            "text": "The instance method name 'getFollowers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 17,
                  "endLine": 54,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 241,
          "message": {
            "text": "The instance method name 'getFollowing_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 17,
                  "endLine": 58,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 242,
          "message": {
            "text": "The instance method name 'getGists_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 17,
                  "endLine": 62,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 243,
          "message": {
            "text": "The instance method name 'getStarred_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 17,
                  "endLine": 66,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 244,
          "message": {
            "text": "The instance method name 'getSubscriptions_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 17,
                  "endLine": 70,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 245,
          "message": {
            "text": "The instance method name 'getOrganizations_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 17,
                  "endLine": 74,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 246,
          "message": {
            "text": "The instance method name 'getRepos_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 17,
                  "endLine": 78,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 80,
          "message": {
            "text": "The instance method name 'getEvents_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 17,
                  "endLine": 82,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 247,
          "message": {
            "text": "The instance method name 'getReceived_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 17,
                  "endLine": 86,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 248,
          "message": {
            "text": "The instance method name 'getSite_admin' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 18,
                  "endLine": 94,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 4,
          "message": {
            "text": "The instance method name 'setNode_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 15,
                  "endLine": 108,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 5,
          "message": {
            "text": "The method parameter name 'node_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 34,
                  "endLine": 108,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 249,
          "message": {
            "text": "The instance method name 'setAvatar_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 15,
                  "endLine": 112,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 250,
          "message": {
            "text": "The method parameter name 'avatar_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 37,
                  "endLine": 112,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 251,
          "message": {
            "text": "The instance method name 'setGravatar_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 15,
                  "endLine": 116,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 252,
          "message": {
            "text": "The method parameter name 'gravatar_id' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 38,
                  "endLine": 116,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 29,
          "message": {
            "text": "The instance method name 'setHtml_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 15,
                  "endLine": 124,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 30,
          "message": {
            "text": "The method parameter name 'html_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 35,
                  "endLine": 124,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 253,
          "message": {
            "text": "The instance method name 'setFollowers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 15,
                  "endLine": 128,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 254,
          "message": {
            "text": "The method parameter name 'followers_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 40,
                  "endLine": 128,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 255,
          "message": {
            "text": "The instance method name 'setFollowing_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 15,
                  "endLine": 132,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 256,
          "message": {
            "text": "The method parameter name 'following_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 40,
                  "endLine": 132,
                  "endColumn": 53
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 257,
          "message": {
            "text": "The instance method name 'setGists_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 15,
                  "endLine": 136,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 258,
          "message": {
            "text": "The method parameter name 'gists_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 36,
                  "endLine": 136,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 259,
          "message": {
            "text": "The instance method name 'setStarred_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 15,
                  "endLine": 140,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 260,
          "message": {
            "text": "The method parameter name 'starred_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 38,
                  "endLine": 140,
                  "endColumn": 49
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 261,
          "message": {
            "text": "The instance method name 'setSubscriptions_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 15,
                  "endLine": 144,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 262,
          "message": {
            "text": "The method parameter name 'subscriptions_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 44,
                  "endLine": 144,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 263,
          "message": {
            "text": "The instance method name 'setOrganizations_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 15,
                  "endLine": 148,
                  "endColumn": 35
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 264,
          "message": {
            "text": "The method parameter name 'organizations_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 44,
                  "endLine": 148,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 265,
          "message": {
            "text": "The instance method name 'setRepos_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 15,
                  "endLine": 152,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 266,
          "message": {
            "text": "The method parameter name 'repos_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 36,
                  "endLine": 152,
                  "endColumn": 45
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 142,
          "message": {
            "text": "The instance method name 'setEvents_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 15,
                  "endLine": 156,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 143,
          "message": {
            "text": "The method parameter name 'events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 37,
                  "endLine": 156,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 267,
          "message": {
            "text": "The instance method name 'setReceived_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 15,
                  "endLine": 160,
                  "endColumn": 37
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 268,
          "message": {
            "text": "The method parameter name 'received_events_url' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 46,
                  "endLine": 160,
                  "endColumn": 65
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 269,
          "message": {
            "text": "The instance method name 'setSite_admin' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 15,
                  "endLine": 168,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 270,
          "message": {
            "text": "The method parameter name 'site_admin' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebHookPostUser.java"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 38,
                  "endLine": 168,
                  "endColumn": 48
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 271,
          "message": {
            "text": "The instance method name 'getPull_request' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebhookPostDto.java"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 39,
                  "endLine": 24,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "MethodNamingConventions",
          "ruleIndex": 272,
          "message": {
            "text": "The instance method name 'setPull_request' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebhookPostDto.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 15,
                  "endLine": 58,
                  "endColumn": 30
                }
              }
            }
          ]
        },
        {
          "ruleId": "FormalParameterNamingConventions",
          "ruleIndex": 273,
          "message": {
            "text": "The method parameter name 'pull_requestObject' doesn't match '[a-z][a-zA-Z0-9]*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/dto/github/GithubWebhookPostDto.java"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 61,
                  "endLine": 58,
                  "endColumn": 79
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 274,
          "message": {
            "text": "Unused import 'org.springframework.data.jpa.repository.Query'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/persistence/CodeAnalysisJobRepositoryImpl.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 275,
          "message": {
            "text": "Unused import 'org.springframework.data.repository.query.Param'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/persistence/CodeAnalysisJobRepositoryImpl.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryLocalBeforeReturn",
          "ruleIndex": 276,
          "message": {
            "text": "Consider simply returning the value vs storing it in local variable 'singleResult'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/persistence/CodeAnalysisJobRepositoryImpl.java"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 29,
                  "endLine": 22,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 277,
          "message": {
            "text": "Unused import 'org.springframework.data.jpa.repository.Modifying'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/persistence/CodeAnalyzerQueueDao.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 58
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 274,
          "message": {
            "text": "Unused import 'org.springframework.data.jpa.repository.Query'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/persistence/CodeAnalyzerQueueDao.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 54
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 275,
          "message": {
            "text": "Unused import 'org.springframework.data.repository.query.Param'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/api/persistence/CodeAnalyzerQueueDao.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 56
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 278,
          "message": {
            "text": "Avoid unused local variables such as 'sourcePath'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/job/CodeAnalysisJobRunner.java"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 16,
                  "endLine": 29,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 279,
          "message": {
            "text": "Avoid unused local variables such as 'rulesetPath'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/job/CodeAnalysisJobRunner.java"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 16,
                  "endLine": 31,
                  "endColumn": 27
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 280,
          "message": {
            "text": "Unused import 'java.util.Arrays'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/job/analyzer/JavaPmdCodeAnalyzer.java"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 25
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 281,
          "message": {
            "text": "Unused import 'java.util.List'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/job/analyzer/JavaPmdCodeAnalyzer.java"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 1,
                  "endLine": 11,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "IdenticalCatchBranches",
          "ruleIndex": 282,
          "message": {
            "text": "'catch' branch identical to 'IOException' branch"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/job/analyzer/JavaPmdCodeAnalyzer.java"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 11,
                  "endLine": 38,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "IdenticalCatchBranches",
          "ruleIndex": 282,
          "message": {
            "text": "'catch' branch identical to 'IOException' branch"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/job/analyzer/JavaPmdDuplicateCodeAnalyzer.java"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 11,
                  "endLine": 36,
                  "endColumn": 10
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryLocalBeforeReturn",
          "ruleIndex": 283,
          "message": {
            "text": "Consider simply returning the value vs storing it in local variable 'job'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/job/queue/CodeAnalysisJobQueueService.java"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 25,
                  "endLine": 20,
                  "endColumn": 28
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 284,
          "message": {
            "text": "Unused import 'org.eclipse.jgit.api.errors.*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/job/service/GitRepoDownloadService.java"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 38
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryLocalBeforeReturn",
          "ruleIndex": 285,
          "message": {
            "text": "Consider simply returning the value vs storing it in local variable 'gitAccessToken'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/job/service/GitTokenService.java"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 20,
                  "endLine": 28,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "UseUtilityClass",
          "ruleIndex": 0,
          "message": {
            "text": "This utility class has a non-private constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/job/service/JwtStore.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 8,
                  "endLine": 14,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 286,
          "message": {
            "text": "Unused import 'org.springframework.boot.autoconfigure.SpringBootApplication'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/TestApplication.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 69
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 287,
          "message": {
            "text": "Unused import 'org.springframework.context.annotation.ComponentScan'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/TestApplication.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 61
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 288,
          "message": {
            "text": "Unused import 'org.springframework.data.jpa.repository.config.EnableJpaRepositories'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/TestApplication.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 77
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryLocalBeforeReturn",
          "ruleIndex": 289,
          "message": {
            "text": "Consider simply returning the value vs storing it in local variable 'webhookPostJson'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/api/service/WebhookPostDeserializationTest.java"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 16,
                  "endLine": 45,
                  "endColumn": 31
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 290,
          "message": {
            "text": "Unused import 'com.auth0.jwt.JWT'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/CloneGitrepo.java"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 291,
          "message": {
            "text": "Unused import 'com.auth0.jwt.algorithms.Algorithm'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/CloneGitrepo.java"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 43
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 292,
          "message": {
            "text": "Unused import 'org.kohsuke.github.GitHub'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/CloneGitrepo.java"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "endLine": 8,
                  "endColumn": 34
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 293,
          "message": {
            "text": "Unused import 'org.kohsuke.github.GitHubBuilder'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/CloneGitrepo.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 41
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 294,
          "message": {
            "text": "Unused import 'java.security.interfaces.RSAPrivateKey'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/CloneGitrepo.java"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "endLine": 13,
                  "endColumn": 47
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 295,
          "message": {
            "text": "Unused import 'java.util.Date'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/CloneGitrepo.java"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 1,
                  "endLine": 14,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 296,
          "message": {
            "text": "Unused import 'java.util.UUID'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/CloneGitrepo.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 23
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 297,
          "message": {
            "text": "The class name 'CloneGitrepo' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/CloneGitrepo.java"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 8,
                  "endLine": 17,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 298,
          "message": {
            "text": "Unused import 'io.jsonwebtoken.security.SignatureAlgorithm'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/GenerateJWT.java"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 1,
                  "endLine": 5,
                  "endColumn": 52
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 299,
          "message": {
            "text": "Unused import 'org.eclipse.jgit.api.Git'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/GenerateJWT.java"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 33
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 300,
          "message": {
            "text": "Unused import 'org.kohsuke.github.*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/GenerateJWT.java"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 29
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 301,
          "message": {
            "text": "Unused import 'java.util.HashMap'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/GenerateJWT.java"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "endLine": 19,
                  "endColumn": 26
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnnecessaryImport",
          "ruleIndex": 302,
          "message": {
            "text": "Unused import 'java.util.Map'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/GenerateJWT.java"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "ClassNamingConventions",
          "ruleIndex": 303,
          "message": {
            "text": "The class name 'GenerateJWT' doesn't match '^Test.*$|^[A-Z][a-zA-Z0-9]*Test(s|Case)?$'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/GenerateJWT.java"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 8,
                  "endLine": 23,
                  "endColumn": 13
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 304,
          "message": {
            "text": "Avoid unused local variables such as 'github'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/GenerateJWT.java"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 16,
                  "endLine": 60,
                  "endColumn": 22
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 305,
          "message": {
            "text": "Avoid unused local variables such as 'list'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/GenerateJWT.java"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 35,
                  "endLine": 89,
                  "endColumn": 39
                }
              }
            }
          ]
        },
        {
          "ruleId": "UnusedLocalVariable",
          "ruleIndex": 306,
          "message": {
            "text": "Avoid unused local variables such as 'repo'."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///Users/user/git/codeanalysis/api/src/test/java/io/codety/poc/TestGithubAPI.java"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 22,
                  "endLine": 15,
                  "endColumn": 26
                }
              }
            }
          ]
        }
      ],
      "invocations": [
        {
          "executionSuccessful": false,
          "toolConfigurationNotifications": [],
          "toolExecutionNotifications": [
            {
              "locations": [
                {
                  "physicalLocation": {
                    "artifactLocation": {
                      "uri": "file:///Users/user/git/codeanalysis/api/src/main/java/io/codety/job/analyzer/dto/CodeViolationDto.java"
                    }
                  }
                }
              ],
              "message": {
                "text": "ParseException: Parse exception in file '/Users/user/git/codeanalysis/api/src/main/java/io/codety/job/analyzer/dto/CodeViolationDto.java' at line 5, column 5: Encountered <STRING_LITERAL: \"\\\"Problem\\\"\">.\nWas expecting:\n    \"}\" ..."
              },
              "exception": {
                "message": "net.sourceforge.pmd.lang.ast.ParseException: Parse exception in file '/Users/user/git/codeanalysis/api/src/main/java/io/codety/job/analyzer/dto/CodeViolationDto.java' at line 5, column 5: Encountered <STRING_LITERAL: \"\\\"Problem\\\"\">.\nWas expecting:\n    \"}\" ...\n\tat net.sourceforge.pmd.lang.java.ast.JavaParserImpl.generateParseException(JavaParserImpl.java:14863)\n\tat net.sourceforge.pmd.lang.java.ast.JavaParserImpl.jj_consume_token(JavaParserImpl.java:14744)\n\tat net.sourceforge.pmd.lang.java.ast.JavaParserImpl.ClassOrInterfaceBody(JavaParserImpl.java:1371)\n\tat net.sourceforge.pmd.lang.java.ast.JavaParserImpl.ClassOrInterfaceDeclaration(JavaParserImpl.java:751)\n\tat net.sourceforge.pmd.lang.java.ast.JavaParserImpl.TypeDeclaration(JavaParserImpl.java:683)\n\tat net.sourceforge.pmd.lang.java.ast.JavaParserImpl.CompilationUnit(JavaParserImpl.java:370)\n\tat net.sourceforge.pmd.lang.java.ast.JavaParser.parseImpl(JavaParser.java:57)\n\tat net.sourceforge.pmd.lang.java.ast.JavaParser.parseImpl(JavaParser.java:25)\n\tat net.sourceforge.pmd.lang.ast.impl.javacc.JjtreeParserAdapter.parse(JjtreeParserAdapter.java:36)\n\tat net.sourceforge.pmd.lang.impl.PmdRunnable.parse(PmdRunnable.java:112)\n\tat net.sourceforge.pmd.lang.impl.PmdRunnable.processSource(PmdRunnable.java:132)\n\tat net.sourceforge.pmd.lang.impl.PmdRunnable.run(PmdRunnable.java:80)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\n"
              }
            }
          ]
        }
      ]
    }
  ]
}
