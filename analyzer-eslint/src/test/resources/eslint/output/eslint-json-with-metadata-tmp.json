{
  "results": [
    {
      "filePath": "/Users/user/git/codety/analyzer/build/reports/tests/test/js/report.js",
      "messages": [
        {
          "ruleId": "no-undef",
          "severity": 2,
          "message": "'window' is not defined.",
          "line": 194,
          "column": 4,
          "nodeType": "Identifier",
          "messageId": "undef",
          "endLine": 194,
          "endColumn": 10
        },
        {
          "ruleId": "no-undef",
          "severity": 2,
          "message": "'window' is not defined.",
          "line": 194,
          "column": 12,
          "nodeType": "Identifier",
          "messageId": "undef",
          "endLine": 194,
          "endColumn": 18
        }
      ],
      "suppressedMessages": [],
      "errorCount": 2,
      "fatalErrorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "(function (window, document) {\n    \"use strict\";\n\n    var tabs = {};\n\n    function changeElementClass(element, classValue) {\n        if (element.getAttribute(\"className\")) {\n            element.setAttribute(\"className\", classValue);\n        } else {\n            element.setAttribute(\"class\", classValue);\n        }\n    }\n\n    function getClassAttribute(element) {\n        if (element.getAttribute(\"className\")) {\n            return element.getAttribute(\"className\");\n        } else {\n            return element.getAttribute(\"class\");\n        }\n    }\n\n    function addClass(element, classValue) {\n        changeElementClass(element, getClassAttribute(element) + \" \" + classValue);\n    }\n\n    function removeClass(element, classValue) {\n        changeElementClass(element, getClassAttribute(element).replace(classValue, \"\"));\n    }\n\n    function initTabs() {\n        var container = document.getElementById(\"tabs\");\n\n        tabs.tabs = findTabs(container);\n        tabs.titles = findTitles(tabs.tabs);\n        tabs.headers = findHeaders(container);\n        tabs.select = select;\n        tabs.deselectAll = deselectAll;\n        tabs.select(0);\n\n        return true;\n    }\n\n    function getCheckBox() {\n        return document.getElementById(\"line-wrapping-toggle\");\n    }\n\n    function getLabelForCheckBox() {\n        return document.getElementById(\"label-for-line-wrapping-toggle\");\n    }\n\n    function findCodeBlocks() {\n        var spans = document.getElementById(\"tabs\").getElementsByTagName(\"span\");\n        var codeBlocks = [];\n        for (var i = 0; i < spans.length; ++i) {\n            if (spans[i].className.indexOf(\"code\") >= 0) {\n                codeBlocks.push(spans[i]);\n            }\n        }\n        return codeBlocks;\n    }\n\n    function forAllCodeBlocks(operation) {\n        var codeBlocks = findCodeBlocks();\n\n        for (var i = 0; i < codeBlocks.length; ++i) {\n            operation(codeBlocks[i], \"wrapped\");\n        }\n    }\n\n    function toggleLineWrapping() {\n        var checkBox = getCheckBox();\n\n        if (checkBox.checked) {\n            forAllCodeBlocks(addClass);\n        } else {\n            forAllCodeBlocks(removeClass);\n        }\n    }\n\n    function initControls() {\n        if (findCodeBlocks().length > 0) {\n            var checkBox = getCheckBox();\n            var label = getLabelForCheckBox();\n\n            checkBox.onclick = toggleLineWrapping;\n            checkBox.checked = false;\n\n            removeClass(label, \"hidden\");\n         }\n    }\n\n    function switchTab() {\n        var id = this.id.substr(1);\n\n        for (var i = 0; i < tabs.tabs.length; i++) {\n            if (tabs.tabs[i].id === id) {\n                tabs.select(i);\n                break;\n            }\n        }\n\n        return false;\n    }\n\n    function select(i) {\n        this.deselectAll();\n\n        changeElementClass(this.tabs[i], \"tab selected\");\n        changeElementClass(this.headers[i], \"selected\");\n\n        while (this.headers[i].firstChild) {\n            this.headers[i].removeChild(this.headers[i].firstChild);\n        }\n\n        var h2 = document.createElement(\"H2\");\n\n        h2.appendChild(document.createTextNode(this.titles[i]));\n        this.headers[i].appendChild(h2);\n    }\n\n    function deselectAll() {\n        for (var i = 0; i < this.tabs.length; i++) {\n            changeElementClass(this.tabs[i], \"tab deselected\");\n            changeElementClass(this.headers[i], \"deselected\");\n\n            while (this.headers[i].firstChild) {\n                this.headers[i].removeChild(this.headers[i].firstChild);\n            }\n\n            var a = document.createElement(\"A\");\n\n            a.setAttribute(\"id\", \"ltab\" + i);\n            a.setAttribute(\"href\", \"#tab\" + i);\n            a.onclick = switchTab;\n            a.appendChild(document.createTextNode(this.titles[i]));\n\n            this.headers[i].appendChild(a);\n        }\n    }\n\n    function findTabs(container) {\n        return findChildElements(container, \"DIV\", \"tab\");\n    }\n\n    function findHeaders(container) {\n        var owner = findChildElements(container, \"UL\", \"tabLinks\");\n        return findChildElements(owner[0], \"LI\", null);\n    }\n\n    function findTitles(tabs) {\n        var titles = [];\n\n        for (var i = 0; i < tabs.length; i++) {\n            var tab = tabs[i];\n            var header = findChildElements(tab, \"H2\", null)[0];\n\n            header.parentNode.removeChild(header);\n\n            if (header.innerText) {\n                titles.push(header.innerText);\n            } else {\n                titles.push(header.textContent);\n            }\n        }\n\n        return titles;\n    }\n\n    function findChildElements(container, name, targetClass) {\n        var elements = [];\n        var children = container.childNodes;\n\n        for (var i = 0; i < children.length; i++) {\n            var child = children.item(i);\n\n            if (child.nodeType === 1 && child.nodeName === name) {\n                if (targetClass && child.className.indexOf(targetClass) < 0) {\n                    continue;\n                }\n\n                elements.push(child);\n            }\n        }\n\n        return elements;\n    }\n\n    // Entry point.\n\n    window.onload = function() {\n        initTabs();\n        initControls();\n    };\n} (window, window.document));",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/user/git/codety/analyzer/build/resources/test/eslint/code-smell-examples/codesmell.js",
      "messages": [
        {
          "ruleId": null,
          "nodeType": null,
          "fatal": true,
          "severity": 2,
          "message": "Parsing error: 'with' in strict mode",
          "line": 192,
          "column": 1
        }
      ],
      "suppressedMessages": [],
      "errorCount": 1,
      "fatalErrorCount": 1,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "(function x(){\"use strict\"; x = 1;}()); // TypeError\n(function x(){x = 1; return x !== 1;}()); // write fails silently; function returns true\n\n(function x(){\"use strict\"; x = (function(){throw 0;})();})() // Error 0\n\n// These three lines rely on ES6. \n(function x(){const x = 1;})() // No-op. In particular, not a redeclaration of x.\n(function (){\"use strict\"; const x = 1; x = 2;})() // TypeError\n(function (){const x = 1; x = 2;})() // TypeError. contrast (function x(){x = 2;}());\n\n//*******************\n\n// Prints 'a b c d e f g h i j k'. Note lack of additional 'c d' before 'k'. No one gets this right.\n\nif (typeof console === 'undefined') console = {log: print};\n\nfunction one(){\n  console.log('a');\n  return {\n    get p() {\n      console.log('e');\n      return {\n        valueOf: function(){\n          console.log('g');\n          return {};\n        },\n        toString: function(){\n          console.log('h');\n          return false;\n        }\n      };\n    },\n    set p(x) {\n      console.log('k');\n    }\n  };\n}\n\nfunction two(){\n  console.log('b');\n  return {\n    toString: function(){\n      console.log('c');\n      return {};\n    },\n    valueOf: function(){\n      console.log('d');\n      return 'p';\n    }\n  };\n}\n\nfunction three() {\n  console.log('f');\n  return {\n    valueOf: function(){\n      console.log('i');\n      return {};\n    },\n    toString: function(){\n      console.log('j');\n      return false;\n    }\n  };\n}\n\none()[two()] += three();\n\n\n\n\n// Prints 'a b c d e g h k', in that order. Firefox gets this right, no one else does.\n\nconsole.log('--');\n\none()[two()]++\n\n\n\n// Prints 'a b', in that order. JavaScriptCore is the only engine to get this wrong, to my knowledge.\n\nconsole.log('--');\n\nfunction four() {\n  console.log('a');\n  return null;\n}\n\ntry {\n  four()[two()] += three();\n} catch(e) {\n  // pass\n}\n\n//*******************\n\n\n(function(x, y){ y = 1; return arguments[1]; })(0) // undefined\n(function(x, y){ arguments[1] = 1; return y; })(0) // undefined\n\n\n//*******************\n\n\nvar f = function(m){\n  x: try {\n    return 2;\n  } finally {\n    try {\n      \n    } finally {\n      switch(m) {\n        case 0: return 0;\n        case 1: break x;\n        case 2: \"nop\";\n      }\n    }\n  }\n  return 1;\n}\n\nconsole.log(f(0) == 0);\nconsole.log(f(1) == 1);\nconsole.log(f(2) == 2);\n\n\n//*******************\n\n\n// no-op\nx: try {\n  throw 0;\n} catch(e) {\n  try {\n    throw 1;\n  } catch(e2) {\n    throw e2;\n  }\n} finally {\n  break x;\n}\n\n\n//*******************\n\n\n(function (x) {\n  console.log(Object.getOwnPropertyDescriptor(arguments, '0'));\n  arguments[0] = 1;\n  \n  console.log(Object.getOwnPropertyDescriptor(arguments, '0'));\n  \n  x = 2;\n  console.log(Object.getOwnPropertyDescriptor(arguments, '0'));\n  \n  Object.defineProperty(arguments, '0', {value: 3, writable: true, configurable: true, enumerable: true});\n  console.log(Object.getOwnPropertyDescriptor(arguments, '0'));\n  console.log(x); // 3 (in chrome; 2 in firefox)\n  \n  Object.defineProperty(arguments, '0', {get: function(){return 4;}, configurable: true, enumerable: true});\n  \n  console.log(x); // 3 (in chrome; 2 in firefox; never 4)\n  \n  Object.defineProperty(arguments, '0', {value: 5, writable: true, configurable: true, enumerable: true});\n  \n  console.log(x); // 3 (in chrome; 2 in firefox; never 4)\n  \n  console.log(Object.getOwnPropertyDescriptor(arguments, '0'));\n})(0)\n\n\n//*******************\n\n\nObject.defineProperty((function(){return this;})(), 'y', {set: function(x){console.log('why')}})\nObject.defineProperty((function(){return this;})(), 'z', {get: function(){console.log('bad')}})\ny = 1; // prints 'why'\nz; // prints 'bad'. yes, this is a bare variable access with side effects.\n\n\n//*******************\n\n\ntry {\n  throw null;\n} catch(e) {\n  var e = 2;\n}\ne; // undefined, but not reference error\n\n\nwith({z:1}){\n  var z = 0;\n}\nz; // undefined, but not reference error\n\n\n//*******************\n\n\ntypeof document.all === 'undefined'; // true\ndocument.all[0]; // not an error\n\n\n//*******************\n\n\nfunction isAProxy(arg) {\n  let child = {};\n  Object.setPrototypeOf(child, arg);\n\n  let parent = {};\n  Object.setPrototypeOf(arg, parent);\n\n  try {\n    Object.setPrototypeOf(parent, child); // see 9.1.2.1.8.c.i\n    return true;\n  } catch({}) {\n    return false;\n  }\n}\n\nisAProxy(new Proxy({}, {})); // true\nisAProxy({}); // false\n\n\n//*******************\n\n\n// This is a sequence of two IdentifierExpressions. Keywords are sequences of literal codepoints, so it's not the 'let' keyword. But in sloppy mode, nothing restricts an identifier from being named \"let\".\nle\\u0074\na;\n\n\n//*******************\n\n// Scripts support HTML comments, so both of these are just comments:\n\n--> foo\n\n<!-- bar\n\n// On the other hand, modules don't. So the below has very different parse trees in scripts vs modules.\n\na<!--b\n\n\n\n\n//*******************\n\nlet x;\n(class A { [x = () => A](){} });\nx(); // the class!\n\n(class B { [A](){} }); // TDZ error!\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/user/git/codety/analyzer/build/resources/test/eslint/test-esline.config-old-way.js",
      "messages": [
        {
          "ruleId": "no-undef",
          "severity": 2,
          "message": "'module' is not defined.",
          "line": 1,
          "column": 1,
          "nodeType": "Identifier",
          "messageId": "undef",
          "endLine": 1,
          "endColumn": 7
        }
      ],
      "suppressedMessages": [],
      "errorCount": 1,
      "fatalErrorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "module.exports = {\n    rules: {\n            \"semi\": \"error\",\n//            \"vue/multi-word-component-names\": \"error\",\n//            \"vue/no-deprecated-data-object-declaration\": \"error\",\n//            \"vue/no-deprecated-destroyed-lifecycle\": \"error\",\n//            \"vue/no-deprecated-dollar-listeners-api\": \"error\",\n//            \"vue/no-deprecated-v-bind-sync\": \"error\",\n//            \"vue/no-parsing-error\": \"error\",\n//            \"strict\": \"error\",\n            \"no-undefined\": \"error\",\n            \"no-undef\": \"error\",\n            \"no-redeclare\": \"error\",\n            \"no-labels\": \"error\",\n            \"new-cap\": \"error\",\n            \"no-return-assign\": \"error\",\n            \"no-useless-constructor\": \"error\",\n//    'react/forbid-dom-props': ['off', { forbid: [] }],\n//    'react/jsx-boolean-value': ['error', 'never', { always: [] }],\n//    'react/jsx-closing-bracket-location': ['error', 'line-aligned'],\n//    'react/jsx-closing-tag-location': 'error',\n//    'react/jsx-curly-spacing': ['error', 'never', { allowMultiline: true }],\n    }\n\n}",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/user/git/codety/analyzer/src/test/resources/eslint/code-smell-examples/codesmell.js",
      "messages": [
        {
          "ruleId": null,
          "nodeType": null,
          "fatal": true,
          "severity": 2,
          "message": "Parsing error: 'with' in strict mode",
          "line": 192,
          "column": 1
        }
      ],
      "suppressedMessages": [],
      "errorCount": 1,
      "fatalErrorCount": 1,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "(function x(){\"use strict\"; x = 1;}()); // TypeError\n(function x(){x = 1; return x !== 1;}()); // write fails silently; function returns true\n\n(function x(){\"use strict\"; x = (function(){throw 0;})();})() // Error 0\n\n// These three lines rely on ES6. \n(function x(){const x = 1;})() // No-op. In particular, not a redeclaration of x.\n(function (){\"use strict\"; const x = 1; x = 2;})() // TypeError\n(function (){const x = 1; x = 2;})() // TypeError. contrast (function x(){x = 2;}());\n\n//*******************\n\n// Prints 'a b c d e f g h i j k'. Note lack of additional 'c d' before 'k'. No one gets this right.\n\nif (typeof console === 'undefined') console = {log: print};\n\nfunction one(){\n  console.log('a');\n  return {\n    get p() {\n      console.log('e');\n      return {\n        valueOf: function(){\n          console.log('g');\n          return {};\n        },\n        toString: function(){\n          console.log('h');\n          return false;\n        }\n      };\n    },\n    set p(x) {\n      console.log('k');\n    }\n  };\n}\n\nfunction two(){\n  console.log('b');\n  return {\n    toString: function(){\n      console.log('c');\n      return {};\n    },\n    valueOf: function(){\n      console.log('d');\n      return 'p';\n    }\n  };\n}\n\nfunction three() {\n  console.log('f');\n  return {\n    valueOf: function(){\n      console.log('i');\n      return {};\n    },\n    toString: function(){\n      console.log('j');\n      return false;\n    }\n  };\n}\n\none()[two()] += three();\n\n\n\n\n// Prints 'a b c d e g h k', in that order. Firefox gets this right, no one else does.\n\nconsole.log('--');\n\none()[two()]++\n\n\n\n// Prints 'a b', in that order. JavaScriptCore is the only engine to get this wrong, to my knowledge.\n\nconsole.log('--');\n\nfunction four() {\n  console.log('a');\n  return null;\n}\n\ntry {\n  four()[two()] += three();\n} catch(e) {\n  // pass\n}\n\n//*******************\n\n\n(function(x, y){ y = 1; return arguments[1]; })(0) // undefined\n(function(x, y){ arguments[1] = 1; return y; })(0) // undefined\n\n\n//*******************\n\n\nvar f = function(m){\n  x: try {\n    return 2;\n  } finally {\n    try {\n      \n    } finally {\n      switch(m) {\n        case 0: return 0;\n        case 1: break x;\n        case 2: \"nop\";\n      }\n    }\n  }\n  return 1;\n}\n\nconsole.log(f(0) == 0);\nconsole.log(f(1) == 1);\nconsole.log(f(2) == 2);\n\n\n//*******************\n\n\n// no-op\nx: try {\n  throw 0;\n} catch(e) {\n  try {\n    throw 1;\n  } catch(e2) {\n    throw e2;\n  }\n} finally {\n  break x;\n}\n\n\n//*******************\n\n\n(function (x) {\n  console.log(Object.getOwnPropertyDescriptor(arguments, '0'));\n  arguments[0] = 1;\n  \n  console.log(Object.getOwnPropertyDescriptor(arguments, '0'));\n  \n  x = 2;\n  console.log(Object.getOwnPropertyDescriptor(arguments, '0'));\n  \n  Object.defineProperty(arguments, '0', {value: 3, writable: true, configurable: true, enumerable: true});\n  console.log(Object.getOwnPropertyDescriptor(arguments, '0'));\n  console.log(x); // 3 (in chrome; 2 in firefox)\n  \n  Object.defineProperty(arguments, '0', {get: function(){return 4;}, configurable: true, enumerable: true});\n  \n  console.log(x); // 3 (in chrome; 2 in firefox; never 4)\n  \n  Object.defineProperty(arguments, '0', {value: 5, writable: true, configurable: true, enumerable: true});\n  \n  console.log(x); // 3 (in chrome; 2 in firefox; never 4)\n  \n  console.log(Object.getOwnPropertyDescriptor(arguments, '0'));\n})(0)\n\n\n//*******************\n\n\nObject.defineProperty((function(){return this;})(), 'y', {set: function(x){console.log('why')}})\nObject.defineProperty((function(){return this;})(), 'z', {get: function(){console.log('bad')}})\ny = 1; // prints 'why'\nz; // prints 'bad'. yes, this is a bare variable access with side effects.\n\n\n//*******************\n\n\ntry {\n  throw null;\n} catch(e) {\n  var e = 2;\n}\ne; // undefined, but not reference error\n\n\nwith({z:1}){\n  var z = 0;\n}\nz; // undefined, but not reference error\n\n\n//*******************\n\n\ntypeof document.all === 'undefined'; // true\ndocument.all[0]; // not an error\n\n\n//*******************\n\n\nfunction isAProxy(arg) {\n  let child = {};\n  Object.setPrototypeOf(child, arg);\n\n  let parent = {};\n  Object.setPrototypeOf(arg, parent);\n\n  try {\n    Object.setPrototypeOf(parent, child); // see 9.1.2.1.8.c.i\n    return true;\n  } catch({}) {\n    return false;\n  }\n}\n\nisAProxy(new Proxy({}, {})); // true\nisAProxy({}); // false\n\n\n//*******************\n\n\n// This is a sequence of two IdentifierExpressions. Keywords are sequences of literal codepoints, so it's not the 'let' keyword. But in sloppy mode, nothing restricts an identifier from being named \"let\".\nle\\u0074\na;\n\n\n//*******************\n\n// Scripts support HTML comments, so both of these are just comments:\n\n--> foo\n\n<!-- bar\n\n// On the other hand, modules don't. So the below has very different parse trees in scripts vs modules.\n\na<!--b\n\n\n\n\n//*******************\n\nlet x;\n(class A { [x = () => A](){} });\nx(); // the class!\n\n(class B { [A](){} }); // TDZ error!\n",
      "usedDeprecatedRules": []
    },
    {
      "filePath": "/Users/user/git/codety/analyzer/src/test/resources/eslint/test-esline.config-old-way.js",
      "messages": [
        {
          "ruleId": "no-undef",
          "severity": 2,
          "message": "'module' is not defined.",
          "line": 1,
          "column": 1,
          "nodeType": "Identifier",
          "messageId": "undef",
          "endLine": 1,
          "endColumn": 7
        }
      ],
      "suppressedMessages": [],
      "errorCount": 1,
      "fatalErrorCount": 0,
      "warningCount": 0,
      "fixableErrorCount": 0,
      "fixableWarningCount": 0,
      "source": "module.exports = {\n    rules: {\n            \"semi\": \"error\",\n//            \"vue/multi-word-component-names\": \"error\",\n//            \"vue/no-deprecated-data-object-declaration\": \"error\",\n//            \"vue/no-deprecated-destroyed-lifecycle\": \"error\",\n//            \"vue/no-deprecated-dollar-listeners-api\": \"error\",\n//            \"vue/no-deprecated-v-bind-sync\": \"error\",\n//            \"vue/no-parsing-error\": \"error\",\n//            \"strict\": \"error\",\n            \"no-undefined\": \"error\",\n            \"no-undef\": \"error\",\n            \"no-redeclare\": \"error\",\n            \"no-labels\": \"error\",\n            \"new-cap\": \"error\",\n            \"no-return-assign\": \"error\",\n            \"no-useless-constructor\": \"error\",\n//    'react/forbid-dom-props': ['off', { forbid: [] }],\n//    'react/jsx-boolean-value': ['error', 'never', { always: [] }],\n//    'react/jsx-closing-bracket-location': ['error', 'line-aligned'],\n//    'react/jsx-closing-tag-location': 'error',\n//    'react/jsx-curly-spacing': ['error', 'never', { allowMultiline: true }],\n    }\n\n}",
      "usedDeprecatedRules": []
    }
  ],
  "metadata": {
    "cwd": "/Users/user/git/codety/analyzer",
    "rulesMeta": {
      "no-undef": {
        "type": "problem",
        "docs": {
          "description": "Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
          "recommended": true,
          "url": "https://eslint.org/docs/latest/rules/no-undef"
        },
        "schema": [
          {
            "type": "object",
            "properties": {
              "typeof": {
                "type": "boolean",
                "default": false
              }
            },
            "additionalProperties": false
          }
        ],
        "messages": {
          "undef": "'{{name}}' is not defined."
        }
      }
    }
  }
}
