[
    {
        "type": "convention",
        "module": "consistency",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "analyzer-pylint/build/resources/test/pylint/code-smell-examples/consistency.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "consistency",
        "obj": "",
        "line": 2,
        "column": 0,
        "endLine": 2,
        "endColumn": 33,
        "path": "analyzer-pylint/build/resources/test/pylint/code-smell-examples/consistency.py",
        "symbol": "wrong-import-order",
        "message": "standard import \"typing.Optional\" should be placed before third party import \"torch\"",
        "message-id": "C0411"
    },
    {
        "type": "convention",
        "module": "test1",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "analyzer-pylint/build/resources/test/pylint/code-smell-examples/test1.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "test1",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": 1,
        "endColumn": 2,
        "path": "analyzer-pylint/build/resources/test/pylint/code-smell-examples/test1.py",
        "symbol": "invalid-name",
        "message": "Constant name \"b3\" doesn't conform to UPPER_CASE naming style",
        "message-id": "C0103"
    },
    {
        "type": "error",
        "module": "test1",
        "obj": "",
        "line": 2,
        "column": 6,
        "endLine": 2,
        "endColumn": 8,
        "path": "analyzer-pylint/build/resources/test/pylint/code-smell-examples/test1.py",
        "symbol": "undefined-variable",
        "message": "Undefined variable 'a2'",
        "message-id": "E0602"
    },
    {
        "type": "convention",
        "module": "consistency",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "analyzer-pylint/src/test/resources/pylint/code-smell-examples/consistency.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "consistency",
        "obj": "",
        "line": 2,
        "column": 0,
        "endLine": 2,
        "endColumn": 33,
        "path": "analyzer-pylint/src/test/resources/pylint/code-smell-examples/consistency.py",
        "symbol": "wrong-import-order",
        "message": "standard import \"typing.Optional\" should be placed before third party import \"torch\"",
        "message-id": "C0411"
    },
    {
        "type": "convention",
        "module": "test1",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "analyzer-pylint/src/test/resources/pylint/code-smell-examples/test1.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "test1",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": 1,
        "endColumn": 2,
        "path": "analyzer-pylint/src/test/resources/pylint/code-smell-examples/test1.py",
        "symbol": "invalid-name",
        "message": "Constant name \"b3\" doesn't conform to UPPER_CASE naming style",
        "message-id": "C0103"
    },
    {
        "type": "error",
        "module": "test1",
        "obj": "",
        "line": 2,
        "column": 6,
        "endLine": 2,
        "endColumn": 8,
        "path": "analyzer-pylint/src/test/resources/pylint/code-smell-examples/test1.py",
        "symbol": "undefined-variable",
        "message": "Undefined variable 'a2'",
        "message-id": "E0602"
    },
    {
        "type": "convention",
        "module": "bad-python-code",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "code-issue-examples/python/bad-python-code.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "bad-python-code",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "code-issue-examples/python/bad-python-code.py",
        "symbol": "invalid-name",
        "message": "Module name \"bad-python-code\" doesn't conform to snake_case naming style",
        "message-id": "C0103"
    },
    {
        "type": "convention",
        "module": "bad-python-code",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": 1,
        "endColumn": 2,
        "path": "code-issue-examples/python/bad-python-code.py",
        "symbol": "invalid-name",
        "message": "Constant name \"b3\" doesn't conform to UPPER_CASE naming style",
        "message-id": "C0103"
    },
    {
        "type": "error",
        "module": "bad-python-code",
        "obj": "",
        "line": 2,
        "column": 6,
        "endLine": 2,
        "endColumn": 8,
        "path": "code-issue-examples/python/bad-python-code.py",
        "symbol": "undefined-variable",
        "message": "Undefined variable 'a2'",
        "message-id": "E0602"
    },
    {
        "type": "convention",
        "module": "consistency",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "code-issue-examples/python/consistency.py",
        "symbol": "missing-module-docstring",
        "message": "Missing module docstring",
        "message-id": "C0114"
    },
    {
        "type": "convention",
        "module": "consistency",
        "obj": "",
        "line": 2,
        "column": 0,
        "endLine": 2,
        "endColumn": 33,
        "path": "code-issue-examples/python/consistency.py",
        "symbol": "wrong-import-order",
        "message": "standard import \"typing.Optional\" should be placed before third party import \"torch\"",
        "message-id": "C0411"
    },
    {
        "type": "refactor",
        "module": "consistency",
        "obj": "",
        "line": 1,
        "column": 0,
        "endLine": null,
        "endColumn": null,
        "path": "code-issue-examples/python/consistency.py",
        "symbol": "duplicate-code",
        "message": "Similar lines in 2 files\n==consistency:[46:72]\n==consistency:[46:72]\n    if src_weights is None:\n        all_dims: List[int] = torch.arange(est_sources.ndim).tolist()\n        all_dims.pop(dim)  # Remove source axis\n        all_dims.pop(0)  # Remove batch axis\n        src_weights = torch.mean(est_sources**2, dim=all_dims, keepdim=True)\n    # Make sure that the weights sum up to 1\n    norm_weights = torch.sum(src_weights, dim=dim, keepdim=True) + 1e-8\n    src_weights = src_weights / norm_weights\n\n    # Compute residual mix - sum(est_sources)\n    if mixture.ndim == est_sources.ndim - 1:\n        # mixture (batch, *), est_sources (batch, n_src, *)\n        residual = (mixture - est_sources.sum(dim=dim)).unsqueeze(dim)\n    elif mixture.ndim == est_sources.ndim:\n        # mixture (batch, 1, *), est_sources (batch, n_src, *)\n        residual = mixture - est_sources.sum(dim=dim, keepdim=True)\n    else:\n        n, m = est_sources.ndim, mixture.ndim\n        raise RuntimeError(\n            f\"The size of the mixture tensor should match the \"\n            f\"size of the est_sources tensor. Expected mixture\"\n            f\"tensor to have {n} or {n-1} dimension, found {m}.\"\n        )\n    # Compute remove\n    new_sources = est_sources + src_weights * residual\n    return new_sources",
        "message-id": "R0801"
    }
]